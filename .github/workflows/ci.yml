name: Build CI

on: push

env:
  INTEGRATION_TEST_COMMIT_NAME: Integration Test Build[bot]
  INTEGRATION_TEST_COMMIT_EMAIL: integration-test-bot@users.noreply.github.com
  INTEGRATION_TEST_PACKAGES: >-
    scheme-basic
    cleveref
    hyperref
    latexmk
    eurosym
    xsim
    babel-german
    hyphen-german
    csquotes
    csquotes-de
    wrapfig
    tcolorbox
    paracol
    mdframed
    koma-script
    pgf
    environ
    booktabs
    enumitem
    listings
    soul
    caption
    fontawesome5
    zref
    needspace
    tikzfill
    pdfcol
    listingsutf8
    xstring

jobs:
  lint:
    name: "Lint+typecheck"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          cache: "pip"
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install -r requirements.txt
      - name: Lint
        run: make lint
      - name: Type check
        run: make typecheck

  unit-test:
    name: "Unit Test"
    runs-on: ubuntu-latest
    needs: ["lint"]
    strategy:
      matrix:
        python-version: ["3.13"]
        texlive-version: ["2024", "2025"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          cache: "pip" # caching pip dependencies
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install -r requirements.txt
      - name: Setup TeX Live
        uses: zauguin/install-texlive@v4
        with:
          texlive_version: ${{ matrix.texlive-version }}
          packages: >-
            scheme-basic
            latexmk
      - name: Run unittests
        run: make test

  integration-test:
    name: "Integration Test"
    runs-on: ubuntu-latest
    needs: ["unit-test"]
    strategy:
      matrix:
        python-version: ["3.13"]
        texlive-version: ["2024", "2025"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          cache: "pip" # caching pip dependencies
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install -r requirements.txt

      # Integration test 1

      - name: Prepare repositories and test files
        run: python -m action_tests

      - name: "Integration test 1: Test successful build without existing checksum (old build system)"
        id: integration-test-1
        uses: ./
        if: always()
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_success_no_checksum/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 1
        if: always()
        run: python -m action_tests --check old_build_success_no_checksum ${{ steps.integration-test-1.outcome }}

      # Integration test 2

      - name: "Integration test 2: Test no build with same checksum and existing PDFs (old build system)"
        id: integration-test-2
        uses: ./
        if: always()
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_success_same_checksum/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 2
        if: always()
        run: python -m action_tests --check old_build_success_same_checksum ${{ steps.integration-test-2.outcome }}

      # Integration test 3

      - name: "Integration test 3: Test no build with same checksum but no existing PDF (old build system)"
        id: integration-test-3
        uses: ./
        if: always()
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_success_same_checksum_no_pdf/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 3
        if: always()
        run: python -m action_tests --check old_build_success_same_checksum_no_pdf ${{ steps.integration-test-3.outcome }}

      # Integration test 4

      - name: "Integration test 4: Test no build with wrong checksum (old build system)"
        id: integration-test-4
        uses: ./
        if: always()
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_success_wrong_checksum/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 4
        if: always()
        run: python -m action_tests --check old_build_success_wrong_checksum ${{ steps.integration-test-4.outcome }}

      # Integration test 5

      - name: "Integration test 5: Test build failure with new file (old build system)"
        id: integration-test-5
        uses: ./
        if: always()
        continue-on-error: true
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_failure_new_file/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 5
        if: always()
        run: python -m action_tests --check old_build_failure_new_file ${{ steps.integration-test-5.outcome }}

      # Integration test 6

      - name: "Integration test 6: Test build failure without a checksum (old build system)"
        id: integration-test-6
        uses: ./
        if: always()
        continue-on-error: true
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_failure_no_checksum/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 6
        if: always()
        run: python -m action_tests --check old_build_failure_no_checksum ${{ steps.integration-test-6.outcome }}

      # Integration test 7

      - name: "Integration test 7: Test build failure with an updated file (old build system)"
        id: integration-test-7
        uses: ./
        if: always()
        continue-on-error: true
        with:
          config_file_name: "config.json"
          working_directory: "/tmp/test-locals/old_build_failure_update_file/"
          commit_user_name: ${{ env.INTEGRATION_TEST_COMMIT_NAME }}
          commit_user_email: ${{ env.INTEGRATION_TEST_COMMIT_EMAIL }}
          texlive_packages: ${{ env.INTEGRATION_TEST_PACKAGES }}

      - name: Verify integration test 7
        if: always()
        run: python -m action_tests --check old_build_failure_update_file ${{ steps.integration-test-7.outcome }}

      # TODO: add more tests

  deploy:
    name: "Create release"
    needs: ["unit-test", "integration-test"]
    if: "${{ startsWith(github.ref, 'refs/tags/') }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # read changelog for release notes
      - name: Prepare release notes
        id: changelog
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          echo "TAG=$TAG_NAME" >> $GITHUB_ENV
          NOTES=$(awk "/^## \[${TAG_NAME:1}\]/{flag=1;next}/^## /{flag=0}flag" CHANGELOG.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
